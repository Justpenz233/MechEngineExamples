#pragma once
{{#include_headfiles}}
#include "{{headfile_name}}"
{{/include_headfiles}}

{{#class_defines}}class {{class_name}};
{{/class_defines}}
namespace Reflection{
{{#class_defines}}namespace TypeFieldReflectionOparator{
    class Type{{class_name}}Operator{
    public:
        static const char* getClassName(){ return "{{class_name}}";}
        static void* constructorWithJson(const Json& json_context){
            CheckDefaultConstructible({{class_name}});
            {{class_name}}* ret_instance= new {{class_name}}();
            Serializer::read(json_context, *ret_instance);
            return ret_instance;
        }
        static Json writeByName(void* instance){
            return Serializer::write(*({{class_name}}*)instance);
        }
        // base class
        static int get{{class_name}}BaseClassReflectionInstanceList(ReflectionInstance* &out_list, void* instance){
            int count = {{class_base_class_size}};
            {{#class_has_base}}out_list = new ReflectionInstance[count];
            int i = 0;
            {{#class_base_class_defines}}
               out_list[i++] = TypeMetaDef({{class_base_class_name}},static_cast<{{class_name}}*>(instance));
            {{/class_base_class_defines}}
            {{/class_has_base}}
            return count;
        }
        {{#class_field_defines}}// fields
        static const char* getFieldName_{{class_field_name}}(){ return "{{class_field_name}}";}
        static const char* getFieldTypeName_{{class_field_name}}(){ return "{{{class_field_type}}}";}
        static const std::vector<void*> getPropertyTags_{{class_field_name}}(){
            std::vector<void*> tags;
            {{#class_field_tags}} tags.push_back(new {{{tags_constructor}}}); {{/class_field_tags}}
            return tags;
        }
        static void set_{{class_field_name}}(void* instance, void* field_value){ static_cast<{{class_name}}*>(instance)->{{class_field_name}} = *static_cast<{{{class_field_type}}}*>(field_value);}
        static void* get_{{class_field_name}}(void* instance){ return static_cast<void*>(&(static_cast<{{class_name}}*>(instance)->{{class_field_name}}));}
        static constexpr bool isArray_{{class_field_name}}(){ {{#class_field_is_vector}}return true;{{/class_field_is_vector}}{{^class_field_is_vector}}return false;{{/class_field_is_vector}} }
        static constexpr bool isEnum_{{class_field_name}}(){ {{#class_field_is_enum}}return true;{{/class_field_is_enum}}{{^class_field_is_enum}}return false;{{/class_field_is_enum}} }
        static constexpr bool isPointer_{{class_field_name}}(){ return IsAnyPointer<decltype({{class_name}}::{{class_field_name}})>; }
        {{/class_field_defines}}
        {{#class_method_defines}}// methods
        static const char* getMethodName_{{class_method_name}}(){ return "{{class_method_name}}";}
        static std::any invoke_{{class_method_name}}(void * instance, std::any Parameter)
        {
            using tuple_type = function_traits<decltype(&{{class_name}}::{{class_method_name}})>::args_tuple;
            using return_type = function_traits<decltype(&{{class_name}}::{{class_method_name}})>::return_type;
            assert(Parameter.type() == typeid(tuple_type*)); // Wrong parameter type, please check your definition.
            return InvokeFun<decltype(&{{class_name}}::{{class_method_name}}), {{class_name}}, tuple_type>
            (&{{class_name}}::{{class_method_name}}, instance, Parameter, std::is_same<return_type, void>());
        }
        {{/class_method_defines}}
    };
}//namespace TypeFieldReflectionOparator
{{#vector_exist}}namespace ArrayReflectionOperator{
{{#vector_defines}}#ifndef Array{{vector_useful_name}}OperatorMACRO
#define Array{{vector_useful_name}}OperatorMACRO
    class Array{{vector_useful_name}}Operator{
        public:
            static const char* getArrayTypeName(){ return "{{{vector_type_name}}}";}
            static const char* getElementTypeName(){ return "{{{vector_element_type_name}}}";}
            static int getSize(void* instance){
                //todo: should check validation
                return static_cast<int>(static_cast<{{{vector_type_name}}}*>(instance)->size());
            }
            static void* get(int index,void* instance){
                //todo: should check validation
                return static_cast<void*>(&((*static_cast<{{{vector_type_name}}}*>(instance))[index]));
            }
            static void set(int index, void* instance, void* element_value){
                //todo: should check validation
                (*static_cast<{{{vector_type_name}}}*>(instance))[index] = *static_cast<{{{vector_element_type_name}}}*>(element_value);
            }
    };
#endif //Array{{vector_useful_name}}Operator
{{/vector_defines}}
}//namespace ArrayReflectionOperator{{/vector_exist}}

{{#enum_exist}}
namespace EnumReflectionOperator{
{{#enum_defines}}#ifndef Enum{{enum_type_name}}OperatorMACRO
#define Enum{{enum_type_name}}OperatorMACRO
    class Enum{{enum_type_name}}Operator{
        public:
            static const char* get_type_name(){ return "{{{enum_type_name}}}";}
            static const std::vector<std::string> get_enum_names(){
                auto names = magic_enum::enum_names<{{enum_type_name}}>();
                return {names.begin(), names.end()};
            }
            static std::string get_enum_name(void* instance){
                return std::string(magic_enum::enum_name(*static_cast<{{{enum_type_name}}}*>(instance)));
            }
            static void set_enum_name(void* instance, std::string value){
                *static_cast<{{{enum_type_name}}}*>(instance) = magic_enum::enum_cast<{{{enum_type_name}}}>(value).value();
            }
    };
#endif
{{/enum_defines}}
}{{/enum_exist}}
{{#pointer_exist}}
namespace PointerReflectionOperator{
{{#pointer_defines}}#ifndef Pointer{{pointer_useful_name}}OperatorMACRO
#define Pointer{{pointer_useful_name}}OperatorMACRO
    class Pointer{{pointer_useful_name}}Operator{
        public:
            static void* get_pointer(void* instance){
                return reflection_get_pointer_inner(*static_cast<{{{pointer_full_type_name}}}*>(instance));
            }
    };
#endif
{{/pointer_defines}}
}{{/pointer_exist}}

    void TypeWrapperRegister_{{class_name}}(){
        {{#class_field_defines}}FieldFunctionTuple* field_function_tuple_{{class_field_name}}=new FieldFunctionTuple(
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::set_{{class_field_name}},
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::get_{{class_field_name}},
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::getClassName,
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::getFieldName_{{class_field_name}},
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::getFieldTypeName_{{class_field_name}},
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::isArray_{{class_field_name}},
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::isEnum_{{class_field_name}},
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::isPointer_{{class_field_name}},
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::getPropertyTags_{{class_field_name}});
        REGISTER_FIELD_TO_MAP("{{class_name}}", field_function_tuple_{{class_field_name}});
        {{/class_field_defines}}
        {{#class_method_defines}}
        MethodFunctionTuple* method_function_tuple_{{class_method_name}}=new MethodFunctionTuple(
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::getMethodName_{{class_method_name}},
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::invoke_{{class_method_name}});
        REGISTER_Method_TO_MAP("{{class_name}}", method_function_tuple_{{class_method_name}});
        {{/class_method_defines}}
        {{#enum_exist}}{{#enum_defines}}EnumFunctionTuple* enum_tuple_{{enum_type_name}} = new EnumFunctionTuple(
        &EnumReflectionOperator::Enum{{enum_type_name}}Operator::get_type_name,
        &EnumReflectionOperator::Enum{{enum_type_name}}Operator::get_enum_names,
        &EnumReflectionOperator::Enum{{enum_type_name}}Operator::get_enum_name,
        &EnumReflectionOperator::Enum{{enum_type_name}}Operator::set_enum_name);
        REGISTER_ENUM_TO_MAP("{{{enum_type_name}}}", enum_tuple_{{enum_type_name}});
        {{/enum_defines}}{{/enum_exist}}
        {{#pointer_exist}}{{#pointer_defines}}PointerFunctionTuple* pointer_tuple_{{pointer_useful_name}} = new PointerFunctionTuple(
        &PointerReflectionOperator::Pointer{{pointer_useful_name}}Operator::get_pointer);
        REGISTER_POINTER_TO_MAP("{{{pointer_full_type_name}}}", pointer_tuple_{{pointer_useful_name}});
        {{/pointer_defines}}{{/pointer_exist}}
        {{#vector_exist}}{{#vector_defines}}ArrayFunctionTuple* array_tuple_{{vector_useful_name}} = new  ArrayFunctionTuple(
            &ArrayReflectionOperator::Array{{vector_useful_name}}Operator::set,
            &ArrayReflectionOperator::Array{{vector_useful_name}}Operator::get,
            &ArrayReflectionOperator::Array{{vector_useful_name}}Operator::getSize,
            &ArrayReflectionOperator::Array{{vector_useful_name}}Operator::getArrayTypeName,
            &ArrayReflectionOperator::Array{{vector_useful_name}}Operator::getElementTypeName);
        REGISTER_ARRAY_TO_MAP("{{{vector_type_name}}}", array_tuple_{{vector_useful_name}});
        {{/vector_defines}}{{/vector_exist}}
        {{#class_need_register}}ClassFunctionTuple* class_function_tuple_{{class_name}}=new ClassFunctionTuple(
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::get{{class_name}}BaseClassReflectionInstanceList,
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::constructorWithJson,
            &TypeFieldReflectionOparator::Type{{class_name}}Operator::writeByName);
        REGISTER_BASE_CLASS_TO_MAP("{{class_name}}", class_function_tuple_{{class_name}});
        {{/class_need_register}}
    }{{/class_defines}}
namespace TypeWrappersRegister{
    void {{sourefile_name_upper_camel_case}}()
    {
        {{#class_defines}}TypeWrapperRegister_{{class_name}}();
    {{/class_defines}}
    }
}//namespace TypeWrappersRegister
}//namespace Reflection