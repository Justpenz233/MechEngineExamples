#define REF_DEVICE

#define CHAR_LENGTH 8
#define NCHANNELS 4
#define BC7_UNORM 98
#define MAX_UINT 0xFFFFFFFF
#define MIN_UINT 0

static const uint candidateSectionBit[64] = //Associated to partition 0-63
{
 0xCCCC, 0x8888, 0xEEEE, 0xECC8,
 0xC880, 0xFEEC, 0xFEC8, 0xEC80,
 0xC800, 0xFFEC, 0xFE80, 0xE800,
 0xFFE8, 0xFF00, 0xFFF0, 0xF000,
 0xF710, 0x008E, 0x7100, 0x08CE,
 0x008C, 0x7310, 0x3100, 0x8CCE,
 0x088C, 0x3110, 0x6666, 0x366C,
 0x17E8, 0x0FF0, 0x718E, 0x399C,
 0xaaaa, 0xf0f0, 0x5a5a, 0x33cc, 
 0x3c3c, 0x55aa, 0x9696, 0xa55a, 
 0x73ce, 0x13c8, 0x324c, 0x3bdc, 
 0x6996, 0xc33c, 0x9966, 0x660, 
 0x272, 0x4e4, 0x4e40, 0x2720, 
 0xc936, 0x936c, 0x39c6, 0x639c, 
 0x9336, 0x9cc6, 0x817e, 0xe718, 
 0xccf0, 0xfcc, 0x7744, 0xee22, 
};
static const uint candidateSectionBit2[64] = //Associated to partition 64-127
{
 0xaa685050, 0x6a5a5040, 0x5a5a4200, 0x5450a0a8,
 0xa5a50000, 0xa0a05050, 0x5555a0a0, 0x5a5a5050,
 0xaa550000, 0xaa555500, 0xaaaa5500, 0x90909090,
 0x94949494, 0xa4a4a4a4, 0xa9a59450, 0x2a0a4250,
 0xa5945040, 0x0a425054, 0xa5a5a500, 0x55a0a0a0,
 0xa8a85454, 0x6a6a4040, 0xa4a45000, 0x1a1a0500,
 0x0050a4a4, 0xaaa59090, 0x14696914, 0x69691400,
 0xa08585a0, 0xaa821414, 0x50a4a450, 0x6a5a0200,
 0xa9a58000, 0x5090a0a8, 0xa8a09050, 0x24242424,
 0x00aa5500, 0x24924924, 0x24499224, 0x50a50a50,
 0x500aa550, 0xaaaa4444, 0x66660000, 0xa5a0a5a0,
 0x50a050a0, 0x69286928, 0x44aaaa44, 0x66666600,
 0xaa444444, 0x54a854a8, 0x95809580, 0x96969600,
 0xa85454a8, 0x80959580, 0xaa141414, 0x96960000,
 0xaaaa1414, 0xa05050a0, 0xa0a5a5a0, 0x96000000,
 0x40804080, 0xa9a8a9a8, 0xaaaaaa44, 0x2a4a5254,
};
static const uint2 candidateFixUpIndex1D[128] = 
{
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{ 2, 0},{ 8, 0},{ 2, 0},
 { 2, 0},{ 8, 0},{ 8, 0},{15, 0},
 { 2, 0},{ 8, 0},{ 2, 0},{ 2, 0},
 { 8, 0},{ 8, 0},{ 2, 0},{ 2, 0},
 
 {15, 0},{15, 0},{ 6, 0},{ 8, 0},
 { 2, 0},{ 8, 0},{15, 0},{15, 0},
 { 2, 0},{ 8, 0},{ 2, 0},{ 2, 0},
 { 2, 0},{15, 0},{15, 0},{ 6, 0},
 { 6, 0},{ 2, 0},{ 6, 0},{ 8, 0},
 {15, 0},{15, 0},{ 2, 0},{ 2, 0},
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{ 2, 0},{ 2, 0},{15, 0},
 //candidateFixUpIndex1D[i][1], i < 64 should not be used
 
 { 3,15},{ 3, 8},{15, 8},{15, 3},
 { 8,15},{ 3,15},{15, 3},{15, 8},
 { 8,15},{ 8,15},{ 6,15},{ 6,15},
 { 6,15},{ 5,15},{ 3,15},{ 3, 8},
 { 3,15},{ 3, 8},{ 8,15},{15, 3},
 { 3,15},{ 3, 8},{ 6,15},{10, 8},
 { 5, 3},{ 8,15},{ 8, 6},{ 6,10},
 { 8,15},{ 5,15},{15,10},{15, 8},
 
 { 8,15},{15, 3},{ 3,15},{ 5,10},
 { 6,10},{10, 8},{ 8, 9},{15,10},
 {15, 6},{ 3,15},{15, 8},{ 5,15},
 {15, 3},{15, 6},{15, 6},{15, 8}, //The Spec doesn't mark the first fixed up index in this row, so I apply 15 for them, and seems correct
 { 3,15},{15, 3},{ 5,15},{ 5,15},
 { 5,15},{ 8,15},{ 5,15},{10,15},
 { 5,15},{10,15},{ 8,15},{13,15},
 {15, 3},{12,15},{ 3,15},{ 3, 8},
};
static const uint2 candidateFixUpIndex1DOrdered[128] = //Same with candidateFixUpIndex1D but order the result when i >= 64
{
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{ 2, 0},{ 8, 0},{ 2, 0},
 { 2, 0},{ 8, 0},{ 8, 0},{15, 0},
 { 2, 0},{ 8, 0},{ 2, 0},{ 2, 0},
 { 8, 0},{ 8, 0},{ 2, 0},{ 2, 0},
 
 {15, 0},{15, 0},{ 6, 0},{ 8, 0},
 { 2, 0},{ 8, 0},{15, 0},{15, 0},
 { 2, 0},{ 8, 0},{ 2, 0},{ 2, 0},
 { 2, 0},{15, 0},{15, 0},{ 6, 0},
 { 6, 0},{ 2, 0},{ 6, 0},{ 8, 0},
 {15, 0},{15, 0},{ 2, 0},{ 2, 0},
 {15, 0},{15, 0},{15, 0},{15, 0},
 {15, 0},{ 2, 0},{ 2, 0},{15, 0},
 //candidateFixUpIndex1DOrdered[i][1], i < 64 should not be used
 
 { 3,15},{ 3, 8},{ 8,15},{ 3,15},
 { 8,15},{ 3,15},{ 3,15},{ 8,15},
 { 8,15},{ 8,15},{ 6,15},{ 6,15},
 { 6,15},{ 5,15},{ 3,15},{ 3, 8},
 { 3,15},{ 3, 8},{ 8,15},{ 3,15},
 { 3,15},{ 3, 8},{ 6,15},{ 8,10},
 { 3, 5},{ 8,15},{ 6, 8},{ 6,10},
 { 8,15},{ 5,15},{10,15},{ 8,15},
 
 { 8,15},{ 3,15},{ 3,15},{ 5,10},
 { 6,10},{ 8,10},{ 8, 9},{10,15},
 { 6,15},{ 3,15},{ 8,15},{ 5,15},
 { 3,15},{ 6,15},{ 6,15},{ 8,15}, //The Spec doesn't mark the first fixed up index in this row, so I apply 15 for them, and seems correct
 { 3,15},{ 3,15},{ 5,15},{ 5,15},
 { 5,15},{ 8,15},{ 5,15},{10,15},
 { 5,15},{10,15},{ 8,15},{13,15},
 { 3,15},{12,15},{ 3,15},{ 3, 8},
};
//static const uint4x4 candidateRotation[4] = 
//{
 // {1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1},
 // {0,0,0,1},{0,1,0,0},{0,0,1,0},{1,0,0,0},
 // {1,0,0,0},{0,0,0,1},{0,0,1,0},{0,1,0,0},
 // {1,0,0,0},{0,1,0,0},{0,0,0,1},{0,0,1,0}
//};
//static const uint2 candidateIndexPrec[8] = {{3,0},{3,0},{2,0},{2,0},
// {2,3}, //color index and alpha index can exchange
// {2,2},{4,4},{2,2}};

static const uint aWeight[3][16] = { {0, 4, 9, 13, 17, 21, 26, 30, 34, 38, 43, 47, 51, 55, 60, 64},
{0, 9, 18, 27, 37, 46, 55, 64, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 21, 43, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} };

//4 bit index: 0, 4, 9, 13, 17, 21, 26, 30, 34, 38, 43, 47, 51, 55, 60, 64
static const uint aStep[3][64] = { { 0, 0, 0, 1, 1, 1, 1, 2,
 2, 2, 2, 2, 3, 3, 3, 3,
 4, 4, 4, 4, 5, 5, 5, 5,
 6, 6, 6, 6, 6, 7, 7, 7,
 7, 8, 8, 8, 8, 9, 9, 9,
 9,10,10,10,10,10,11,11,
 11,11,12,12,12,12,13,13,
13,13,14,14,14,14,15,15 },
//3 bit index: 0, 9, 18, 27, 37, 46, 55, 64
{ 0,0,0,0,0,1,1,1,
 1,1,1,1,1,1,2,2,
 2,2,2,2,2,2,2,3,
 3,3,3,3,3,3,3,3,
 3,4,4,4,4,4,4,4,
 4,4,5,5,5,5,5,5,
 5,5,5,6,6,6,6,6,
6,6,6,6,7,7,7,7 },
//2 bit index: 0, 21, 43, 64
{ 0,0,0,0,0,0,0,0,
 0,0,0,1,1,1,1,1,
 1,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,1,
 1,2,2,2,2,2,2,2,
 2,2,2,2,2,2,2,2,
 2,2,2,2,2,2,3,3,
3,3,3,3,3,3,3,3 } };
cbuffer _Global : register(b0){
 uint g_tex_width;
 uint g_num_block_x;
 uint g_format;
 uint g_mode_id;
 uint g_start_block_id;
 uint g_num_total_blocks;
 float g_alpha_weight;
}
Texture2D g_Input: register(t0); 
StructuredBuffer<uint4> g_InBuff: register(t1);
RWStructuredBuffer<uint4> g_OutBuff: register(u0);

//Forward declaration
uint2x4 compress_endpoints0( inout uint2x4 endPoint, uint2 P ); //Mode = 0
uint2x4 compress_endpoints1( inout uint2x4 endPoint, uint2 P ); //Mode = 1
uint2x4 compress_endpoints2( inout uint2x4 endPoint ); //Mode = 2
uint2x4 compress_endpoints3( inout uint2x4 endPoint, uint2 P ); //Mode = 3
uint2x4 compress_endpoints7( inout uint2x4 endPoint, uint2 P ); //Mode = 7
uint2x4 compress_endpoints6( inout uint2x4 endPoint, uint2 P ); //Mode = 6
uint2x4 compress_endpoints4( inout uint2x4 endPoint ); //Mode = 4
uint2x4 compress_endpoints5( inout uint2x4 endPoint ); //Mode = 5

void block_package0( out uint4 block, uint partition, uint threadBase ); //Mode0
void block_package1( out uint4 block, uint partition, uint threadBase ); //Mode1
void block_package2( out uint4 block, uint partition, uint threadBase ); //Mode2
void block_package3( out uint4 block, uint partition, uint threadBase ); //Mode3
void block_package4( out uint4 block, uint rotation, uint index_selector, uint threadBase ); //Mode4
void block_package5( out uint4 block, uint rotation, uint threadBase ); //Mode5
void block_package6( out uint4 block, uint threadBase ); //Mode6
void block_package7( out uint4 block, uint partition, uint threadBase ); //Mode7


void swap(inout uint4 lhs, inout uint4 rhs)
{
 uint4 tmp = lhs;
 lhs = rhs;
 rhs = tmp;
}
void swap(inout uint3 lhs, inout uint3 rhs)
{
 uint3 tmp = lhs;
 lhs = rhs;
 rhs = tmp;
}
void swap(inout uint lhs, inout uint rhs)
{
 uint tmp = lhs;
 lhs = rhs;
 rhs = tmp;
}

uint ComputeError(in uint4 a, in uint4 b)
{ 
 return dot(a.rgb, b.rgb) + g_alpha_weight * a.a*b.a;
}

void Ensure_A_Is_Larger( inout uint4 a, inout uint4 b )
{
 if ( a.x < b.x )
 swap( a.x, b.x );
 if ( a.y < b.y )
 swap( a.y, b.y );
 if ( a.z < b.z )
 swap( a.z, b.z );
 if ( a.w < b.w )
 swap( a.w, b.w );
}



#define THREAD_GROUP_SIZE 64
#define BLOCK_SIZE_Y 4
#define BLOCK_SIZE_X 4
#define BLOCK_SIZE (BLOCK_SIZE_Y * BLOCK_SIZE_X)

struct BufferShared
{
 uint4 pixel;
 uint error;
 uint mode;
 uint partition;
 uint index_selector;
 uint rotation;
 uint4 endPoint_low;
 uint4 endPoint_high;
 uint4 endPoint_low_quantized;
 uint4 endPoint_high_quantized;
};
groupshared BufferShared shared_temp[THREAD_GROUP_SIZE];

//uint4 truncate_and_round( uint4 color, uint bits)
//{
 // uint precisionMask = ((1 << bits) - 1) << (8 - bits);
 // uint precisionHalf = (1 << (7-bits));
 //
 // uint4 truncated = color & precisionMask; 
 // uint4 rounded = min(255, color + precisionHalf) & precisionMask;
 // 
 // uint4 truncated_bak = truncated = truncated | (truncated >> bits);
 // uint4 rounded_bak = rounded = rounded | (rounded >> bits);
 //
 // uint4 color_bak = color;
 // 
 // Ensure_A_Is_Larger( rounded, color );
 // Ensure_A_Is_Larger( truncated, color_bak );
 //
 // if (dot(rounded - color, rounded - color) < 
 // dot(truncated - color_bak, truncated - color_bak))
 // {
 // return rounded_bak;
 // }
 // else
 // {
 // return truncated_bak;
 // }
//}

uint4 quantize( uint4 color, uint uPrec )
{
 return (((color << 8) + color) * ((1 << uPrec) - 1) + 32768) >> 16;
}

uint4 unquantize( uint4 color, uint uPrec )
{
 color = color << (8 - uPrec);
 return color | (color >> uPrec);
}

uint2x4 compress_endpoints0( inout uint2x4 endPoint, uint2 P )
{
 uint2x4 quantized;
 [unroll] for ( uint j = 0; j < 2; j ++ )
 {
 quantized[j].rgb = quantize(endPoint[j].rgbb, 5).rgb & 0xFFFFFFFE;
 quantized[j].rgb |= P[j];
 quantized[j].a = 0xFF;

 endPoint[j].rgb = unquantize(quantized[j].rgbb, 5).rgb;
 endPoint[j].a = 0xFF;

 quantized[j] <<= 3;
 }
 return quantized;
}
uint2x4 compress_endpoints1( inout uint2x4 endPoint, uint2 P )
{
 uint2x4 quantized;
 [unroll] for ( uint j = 0; j < 2; j ++ )
 {
 quantized[j].rgb = quantize(endPoint[j].rgbb, 7).rgb & 0xFFFFFFFE;
 quantized[j].rgb |= P[j];
 quantized[j].a = 0xFF;

 endPoint[j].rgb = unquantize(quantized[j].rgbb, 7).rgb;
 endPoint[j].a = 0xFF;

 quantized[j] <<= 1;
 }
 return quantized;
}
uint2x4 compress_endpoints2( inout uint2x4 endPoint )
{
 uint2x4 quantized;
 [unroll] for ( uint j = 0; j < 2; j ++ )
 {
 quantized[j].rgb = quantize(endPoint[j].rgbb, 5).rgb;
 quantized[j].a = 0xFF;

 endPoint[j].rgb = unquantize(quantized[j].rgbb, 5).rgb;
 endPoint[j].a = 0xFF; 

 quantized[j] <<= 3;
 }
 return quantized;
}
uint2x4 compress_endpoints3( inout uint2x4 endPoint, uint2 P )
{
 uint2x4 quantized;
 for ( uint j = 0; j < 2; j ++ )
 {
 quantized[j].rgb = endPoint[j].rgb & 0xFFFFFFFE;
 quantized[j].rgb |= P[j];
 quantized[j].a = 0xFF;
 
 endPoint[j].rgb = quantized[j].rgb;
 endPoint[j].a = 0xFF;
 }
 return quantized;
}
uint2x4 compress_endpoints4( inout uint2x4 endPoint )
{
 uint2x4 quantized;
 [unroll] for ( uint j = 0; j < 2; j ++ )
 {
 quantized[j].rgb = quantize(endPoint[j].rgbb, 5).rgb;
 quantized[j].a = quantize(endPoint[j].a, 6).r;
 
 endPoint[j].rgb = unquantize(quantized[j].rgbb, 5).rgb; 
 endPoint[j].a = unquantize(quantized[j].a, 6).r;

 quantized[j].rgb <<= 3;
 quantized[j].a <<= 2;
 } 
 return quantized;
}
uint2x4 compress_endpoints5( inout uint2x4 endPoint )
{
 uint2x4 quantized;
 [unroll] for ( uint j = 0; j < 2; j ++ )
 {
 quantized[j].rgb = quantize(endPoint[j].rgbb, 7).rgb;
 quantized[j].a = endPoint[j].a;

 endPoint[j].rgb = unquantize(quantized[j].rgbb, 7).rgb;
 // endPoint[j].a Alpha is full precision

 quantized[j].rgb <<= 1;
 } 
 return quantized;
}
uint2x4 compress_endpoints6( inout uint2x4 endPoint, uint2 P )
{
 uint2x4 quantized;
 for ( uint j = 0; j < 2; j ++ )
 {
 quantized[j] = endPoint[j] & 0xFFFFFFFE;
 quantized[j] |= P[j];
 
 endPoint[j] = quantized[j];
 }
 return quantized;
}
uint2x4 compress_endpoints7( inout uint2x4 endPoint, uint2 P )
{
 uint2x4 quantized;
 [unroll] for ( uint j = 0; j < 2; j ++ )
 {
 quantized[j] = quantize(endPoint[j], 6) & 0xFFFFFFFE;
 quantized[j] |= P[j];

 endPoint[j] = unquantize(quantized[j], 6);
 }
 return quantized << 2;
}

#define get_end_point_l(subset) shared_temp[threadBase + subset].endPoint_low_quantized
#define get_end_point_h(subset) shared_temp[threadBase + subset].endPoint_high_quantized
#define get_color_index(index) shared_temp[threadBase + index].error
#define get_alpha_index(index) shared_temp[threadBase + index].mode

void block_package0( out uint4 block, uint partition, uint threadBase )
{
 block.x = 0x01 | ( (partition - 64) << 1 ) 
 | ( ( get_end_point_l(0).r & 0xF0 ) << 1 ) | ( ( get_end_point_h(0).r & 0xF0 ) << 5 ) 
 | ( ( get_end_point_l(1).r & 0xF0 ) << 9 ) | ( ( get_end_point_h(1).r & 0xF0 ) << 13 ) 
 | ( ( get_end_point_l(2).r & 0xF0 ) << 17 ) | ( ( get_end_point_h(2).r & 0xF0 ) << 21 ) 
 | ( ( get_end_point_l(0).g & 0xF0 ) << 25 );
 block.y = ( ( get_end_point_l(0).g & 0xF0 ) >> 7 ) | ( ( get_end_point_h(0).g & 0xF0 ) >> 3 ) 
 | ( ( get_end_point_l(1).g & 0xF0 ) << 1 ) | ( ( get_end_point_h(1).g & 0xF0 ) << 5 ) 
 | ( ( get_end_point_l(2).g & 0xF0 ) << 9 ) | ( ( get_end_point_h(2).g & 0xF0 ) << 13 ) 
 | ( ( get_end_point_l(0).b & 0xF0 ) << 17 ) | ( ( get_end_point_h(0).b & 0xF0 ) << 21 )
 | ( ( get_end_point_l(1).b & 0xF0 ) << 25 );
 block.z = ( ( get_end_point_l(1).b & 0xF0 ) >> 7 ) | ( ( get_end_point_h(1).b & 0xF0 ) >> 3 ) 
 | ( ( get_end_point_l(2).b & 0xF0 ) << 1 ) | ( ( get_end_point_h(2).b & 0xF0 ) << 5 ) 
 | ( ( get_end_point_l(0).r & 0x08 ) << 10 ) | ( ( get_end_point_h(0).r & 0x08 ) << 11 ) 
 | ( ( get_end_point_l(1).r & 0x08 ) << 12 ) | ( ( get_end_point_h(1).r & 0x08 ) << 13 ) 
 | ( ( get_end_point_l(2).r & 0x08 ) << 14 ) | ( ( get_end_point_h(2).r & 0x08 ) << 15 )
 | ( get_color_index(0) << 19 );
 block.w = 0;
 uint i = 1;
 for ( ; i <= min( candidateFixUpIndex1DOrdered[partition][0], 4 ); i ++ )
 {
 block.z |= get_color_index(i) << ( i * 3 + 18 );
 }
 if ( candidateFixUpIndex1DOrdered[partition][0] < 4 ) //i = 4
 {
 block.z |= get_color_index(4) << 29;
 i += 1;
 }
 else //i = 5
 {
 block.w |= ( get_color_index(4) & 0x04 ) >> 2;
 for ( ; i <= candidateFixUpIndex1DOrdered[partition][0]; i ++ )
 block.w |= get_color_index(i) << ( i * 3 - 14 );
 }
 for ( ; i <= candidateFixUpIndex1DOrdered[partition][1]; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 3 - 15 );
 }
 for ( ; i < 16; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 3 - 16 );
 }
}
void block_package1( out uint4 block, uint partition, uint threadBase )
{
 block.x = 0x02 | ( partition << 2 ) 
 | ( ( get_end_point_l(0).r & 0xFC ) << 6 ) | ( ( get_end_point_h(0).r & 0xFC ) << 12 ) 
 | ( ( get_end_point_l(1).r & 0xFC ) << 18 ) | ( ( get_end_point_h(1).r & 0xFC ) << 24 );
 block.y = ( ( get_end_point_l(0).g & 0xFC ) >> 2 ) | ( ( get_end_point_h(0).g & 0xFC ) << 4 ) 
 | ( ( get_end_point_l(1).g & 0xFC ) << 10 ) | ( ( get_end_point_h(1).g & 0xFC ) << 16 )
 | ( ( get_end_point_l(0).b & 0xFC ) << 22 ) | ( ( get_end_point_h(0).b & 0xFC ) << 28 );
 block.z = ( ( get_end_point_h(0).b & 0xFC ) >> 4 ) | ( ( get_end_point_l(1).b & 0xFC ) << 2 )
 | ( ( get_end_point_h(1).b & 0xFC ) << 8 ) 
 | ( ( get_end_point_l(0).r & 0x02 ) << 15 ) | ( ( get_end_point_l(1).r & 0x02 ) << 16 )
 | ( get_color_index(0) << 18 );
 if ( candidateFixUpIndex1DOrdered[partition][0] == 15 )
 {
 block.w = (get_color_index(15) << 30) | (get_color_index(14) << 27) | (get_color_index(13) << 24) | (get_color_index(12) << 21) | (get_color_index(11) << 18) | (get_color_index(10) << 15)
 | (get_color_index(9) << 12) | (get_color_index(8) << 9) | (get_color_index(7) << 6) | (get_color_index(6) << 3) | get_color_index(5);
 block.z |= (get_color_index(4) << 29) | (get_color_index(3) << 26) | (get_color_index(2) << 23) | (get_color_index(1) << 20) | (get_color_index(0) << 18);
 }
 else if ( candidateFixUpIndex1DOrdered[partition][0] == 2 )
 {
 block.w = (get_color_index(15) << 29) | (get_color_index(14) << 26) | (get_color_index(13) << 23) | (get_color_index(12) << 20) | (get_color_index(11) << 17) | (get_color_index(10) << 14)
 | (get_color_index(9) << 11) | (get_color_index(8) << 8) | (get_color_index(7) << 5) | (get_color_index(6) << 2) | (get_color_index(5) >> 1);
 block.z |= (get_color_index(5) << 31) | (get_color_index(4) << 28) | (get_color_index(3) << 25) | (get_color_index(2) << 23) | (get_color_index(1) << 20) | (get_color_index(0) << 18);
 }
 else if ( candidateFixUpIndex1DOrdered[partition][0] == 8 )
 {
 block.w = (get_color_index(15) << 29) | (get_color_index(14) << 26) | (get_color_index(13) << 23) | (get_color_index(12) << 20) | (get_color_index(11) << 17) | (get_color_index(10) << 14)
 | (get_color_index(9) << 11) | (get_color_index(8) << 9) | (get_color_index(7) << 6) | (get_color_index(6) << 3) | get_color_index(5);
 block.z |= (get_color_index(4) << 29) | (get_color_index(3) << 26) | (get_color_index(2) << 23) | (get_color_index(1) << 20) | (get_color_index(0) << 18);
 }
 else //candidateFixUpIndex1DOrdered[partition] == 6
 {
 block.w = (get_color_index(15) << 29) | (get_color_index(14) << 26) | (get_color_index(13) << 23) | (get_color_index(12) << 20) | (get_color_index(11) << 17) | (get_color_index(10) << 14)
 | (get_color_index(9) << 11) | (get_color_index(8) << 8) | (get_color_index(7) << 5) | (get_color_index(6) << 3) | get_color_index(5);
 block.z |= (get_color_index(4) << 29) | (get_color_index(3) << 26) | (get_color_index(2) << 23) | (get_color_index(1) << 20) | (get_color_index(0) << 18);
 }
}
void block_package2( out uint4 block, uint partition, uint threadBase )
{
 block.x = 0x04 | ( (partition - 64) << 3 ) 
 | ( ( get_end_point_l(0).r & 0xF8 ) << 6 ) | ( ( get_end_point_h(0).r & 0xF8 ) << 11 ) 
 | ( ( get_end_point_l(1).r & 0xF8 ) << 16 ) | ( ( get_end_point_h(1).r & 0xF8 ) << 21 ) 
 | ( ( get_end_point_l(2).r & 0xF8 ) << 26 );
 block.y = ( ( get_end_point_l(2).r & 0xF8 ) >> 6 ) | ( ( get_end_point_h(2).r & 0xF8 ) >> 1 )
 | ( ( get_end_point_l(0).g & 0xF8 ) << 4 ) | ( ( get_end_point_h(0).g & 0xF8 ) << 9 ) 
 | ( ( get_end_point_l(1).g & 0xF8 ) << 14 ) | ( ( get_end_point_h(1).g & 0xF8 ) << 19 ) 
 | ( ( get_end_point_l(2).g & 0xF8 ) << 24 );
 block.z = ( ( get_end_point_h(2).g & 0xF8 ) >> 3 ) | ( ( get_end_point_l(0).b & 0xF8 ) << 2 )
 | ( ( get_end_point_h(0).b & 0xF8 ) << 7 ) | ( ( get_end_point_l(1).b & 0xF8 ) << 12 )
 | ( ( get_end_point_h(1).b & 0xF8 ) << 17 ) | ( ( get_end_point_l(2).b & 0xF8 ) << 22 ) 
 | ( ( get_end_point_h(2).b & 0xF8 ) << 27 );
 block.w = ( ( get_end_point_h(2).b & 0xF8 ) >> 5 ) 
 | ( get_color_index(0) << 3 );
 uint i = 1;
 for ( ; i <= candidateFixUpIndex1DOrdered[partition][0]; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 2 + 2 );
 }
 for ( ; i <= candidateFixUpIndex1DOrdered[partition][1]; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 2 + 1 );
 }
 for ( ; i < 16; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 2 );
 }
}
void block_package3( out uint4 block, uint partition, uint threadBase )
{
 block.x = 0x08 | ( partition << 4 ) 
 | ( ( get_end_point_l(0).r & 0xFE ) << 9 ) | ( ( get_end_point_h(0).r & 0xFE ) << 16 ) 
 | ( ( get_end_point_l(1).r & 0xFE ) << 23 ) | ( ( get_end_point_h(1).r & 0xFE ) << 30 );
 block.y = ( ( get_end_point_h(1).r & 0xFE ) >> 2 ) | ( ( get_end_point_l(0).g & 0xFE ) << 5 )
 | ( ( get_end_point_h(0).g & 0xFE ) << 12 ) | ( ( get_end_point_l(1).g & 0xFE ) << 19 )
 | ( ( get_end_point_h(1).g & 0xFE ) << 26 );
 block.z = ( ( get_end_point_h(1).g & 0xFE ) >> 6 ) | ( ( get_end_point_l(0).b & 0xFE ) << 1 )
 | ( ( get_end_point_h(0).b & 0xFE ) << 8 ) | ( ( get_end_point_l(1).b & 0xFE ) << 15 )
 | ( ( get_end_point_h(1).b & 0xFE ) << 22 )
 | ( ( get_end_point_l(0).r & 0x01 ) << 30 ) | ( ( get_end_point_h(0).r & 0x01 ) << 31 );
 block.w = ( ( get_end_point_l(1).r & 0x01 ) << 0 ) | ( ( get_end_point_h(1).r & 0x01 ) << 1 )
 | ( get_color_index(0) << 2 );
 uint i = 1;
 for ( ; i <= candidateFixUpIndex1DOrdered[partition][0]; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 2 + 1 );
 }
 for ( ; i < 16; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 2 );
 }
}
void block_package4( out uint4 block, uint rotation, uint index_selector, uint threadBase )
{
 block.x = 0x10 | ( (rotation & 3) << 5 ) | ( (index_selector & 1) << 7 )
 | ( ( get_end_point_l(0).r & 0xF8 ) << 5 ) | ( ( get_end_point_h(0).r & 0xF8 ) << 10 )
 | ( ( get_end_point_l(0).g & 0xF8 ) << 15 ) | ( ( get_end_point_h(0).g & 0xF8 ) << 20 )
 | ( ( get_end_point_l(0).b & 0xF8 ) << 25 );

 block.y = ( ( get_end_point_l(0).b & 0xF8 ) >> 7 ) | ( ( get_end_point_h(0).b & 0xF8 ) >> 2 )
 | ( ( get_end_point_l(0).a & 0xFC ) << 4 ) | ( ( get_end_point_h(0).a & 0xFC ) << 10 )
 | ( (get_color_index(0) & 1) << 18 ) | ( get_color_index(1) << 19 ) | ( get_color_index(2) << 21 ) | ( get_color_index(3) << 23 ) 
 | ( get_color_index(4) << 25 ) | ( get_color_index(5) << 27 ) | ( get_color_index(6) << 29 ) | ( get_color_index(7) << 31 );

 block.z = ( get_color_index(7) >> 1 ) | ( get_color_index(8) << 1 ) | ( get_color_index(9) << 3 ) | ( get_color_index(10)<< 5 )
 | ( get_color_index(11)<< 7 ) | ( get_color_index(12)<< 9 ) | ( get_color_index(13)<< 11 ) | ( get_color_index(14)<< 13 )
 | ( get_color_index(15)<< 15 ) | ( (get_alpha_index(0) & 3) << 17 ) | ( get_alpha_index(1) << 19 ) | ( get_alpha_index(2) << 22 )
 | ( get_alpha_index(3) << 25 ) | ( get_alpha_index(4) << 28 ) | ( get_alpha_index(5) << 31 );

 block.w = ( get_alpha_index(5) >> 1 ) | ( get_alpha_index(6) << 2 ) | ( get_alpha_index(7) << 5 ) | ( get_alpha_index(8) << 8 ) 
 | ( get_alpha_index(9) << 11 ) | ( get_alpha_index(10)<< 14 ) | ( get_alpha_index(11)<< 17 ) | ( get_alpha_index(12)<< 20 ) 
 | ( get_alpha_index(13)<< 23 ) | ( get_alpha_index(14)<< 26 ) | ( get_alpha_index(15)<< 29 );
}
void block_package5( out uint4 block, uint rotation, uint threadBase )
{
 block.x = 0x20 | ( rotation << 6 )
 | ( ( get_end_point_l(0).r & 0xFE ) << 7 ) | ( ( get_end_point_h(0).r & 0xFE ) << 14 )
 | ( ( get_end_point_l(0).g & 0xFE ) << 21 ) | ( ( get_end_point_h(0).g & 0xFE ) << 28 );
 block.y = ( ( get_end_point_h(0).g & 0xFE ) >> 4 ) | ( ( get_end_point_l(0).b & 0xFE ) << 3 )
 | ( ( get_end_point_h(0).b & 0xFE ) << 10 ) | ( get_end_point_l(0).a << 18 ) | ( get_end_point_h(0).a << 26 );
 block.z = ( get_end_point_h(0).a >> 6 )
 | ( get_color_index(0) << 2 ) | ( get_color_index(1) << 3 ) | ( get_color_index(2) << 5 ) | ( get_color_index(3) << 7 ) 
 | ( get_color_index(4) << 9 ) | ( get_color_index(5) << 11 ) | ( get_color_index(6) << 13 ) | ( get_color_index(7) << 15 )
 | ( get_color_index(8) << 17 ) | ( get_color_index(9) << 19 ) | ( get_color_index(10)<< 21 ) | ( get_color_index(11)<< 23 ) 
 | ( get_color_index(12)<< 25 ) | ( get_color_index(13)<< 27 ) | ( get_color_index(14)<< 29 ) | ( get_color_index(15)<< 31 );
 block.w = ( get_color_index(15)>> 1 ) | ( get_alpha_index(0) << 1 ) | ( get_alpha_index(1) << 2 ) | ( get_alpha_index(2) << 4 )
 | ( get_alpha_index(3) << 6 ) | ( get_alpha_index(4) << 8 ) | ( get_alpha_index(5) << 10 ) | ( get_alpha_index(6) << 12 )
 | ( get_alpha_index(7) << 14 ) | ( get_alpha_index(8) << 16 ) | ( get_alpha_index(9) << 18 ) | ( get_alpha_index(10)<< 20 ) 
 | ( get_alpha_index(11)<< 22 ) | ( get_alpha_index(12)<< 24 ) | ( get_alpha_index(13)<< 26 ) | ( get_alpha_index(14)<< 28 )
 | ( get_alpha_index(15)<< 30 );
}
void block_package6( out uint4 block, uint threadBase )
{
 block.x = 0x40
 | ( ( get_end_point_l(0).r & 0xFE ) << 6 ) | ( ( get_end_point_h(0).r & 0xFE ) << 13 )
 | ( ( get_end_point_l(0).g & 0xFE ) << 20 ) | ( ( get_end_point_h(0).g & 0xFE ) << 27 );
 block.y = ( ( get_end_point_h(0).g & 0xFE ) >> 5 ) | ( ( get_end_point_l(0).b & 0xFE ) << 2 )
 | ( ( get_end_point_h(0).b & 0xFE ) << 9 ) | ( ( get_end_point_l(0).a & 0xFE ) << 16 )
 | ( ( get_end_point_h(0).a & 0xFE ) << 23 )
 | ( get_end_point_l(0).r & 0x01 ) << 31;
 block.z = ( get_end_point_h(0).r & 0x01 )
 | ( get_color_index(0) << 1 ) | ( get_color_index(1) << 4 ) | ( get_color_index(2) << 8 ) | ( get_color_index(3) << 12 ) 
 | ( get_color_index(4) << 16 ) | ( get_color_index(5) << 20 ) | ( get_color_index(6) << 24 ) | ( get_color_index(7) << 28 );
 block.w = ( get_color_index(8) << 0 ) | ( get_color_index(9) << 4 ) | ( get_color_index(10)<< 8 ) | ( get_color_index(11)<< 12 ) 
 | ( get_color_index(12)<< 16 ) | ( get_color_index(13)<< 20 ) | ( get_color_index(14)<< 24 ) | ( get_color_index(15)<< 28 );
}
void block_package7( out uint4 block, uint partition, uint threadBase )
{
 block.x = 0x80 | ( partition << 8 ) 
 | ( ( get_end_point_l(0).r & 0xF8 ) << 11 ) | ( ( get_end_point_h(0).r & 0xF8 ) << 16 ) 
 | ( ( get_end_point_l(1).r & 0xF8 ) << 21 ) | ( ( get_end_point_h(1).r & 0xF8 ) << 26 );
 block.y = ( ( get_end_point_h(1).r & 0xF8 ) >> 6 ) | ( ( get_end_point_l(0).g & 0xF8 ) >> 1 )
 | ( ( get_end_point_h(0).g & 0xF8 ) << 4 ) | ( ( get_end_point_l(1).g & 0xF8 ) << 9 ) 
 | ( ( get_end_point_h(1).g & 0xF8 ) << 14 ) | ( ( get_end_point_l(0).b & 0xF8 ) << 19 ) 
 | ( ( get_end_point_h(0).b & 0xF8 ) << 24 );
 block.z = ( ( get_end_point_l(1).b & 0xF8 ) >> 3 ) | ( ( get_end_point_h(1).b & 0xF8 ) << 2 ) 
 | ( ( get_end_point_l(0).a & 0xF8 ) << 7 ) | ( ( get_end_point_h(0).a & 0xF8 ) << 12 ) 
 | ( ( get_end_point_l(1).a & 0xF8 ) << 17 ) | ( ( get_end_point_h(1).a & 0xF8 ) << 22 ) 
 | ( ( get_end_point_l(0).r & 0x04 ) << 28 ) | ( ( get_end_point_h(0).r & 0x04 ) << 29 );
 block.w = ( ( get_end_point_l(1).r & 0x04 ) >> 2 ) | ( ( get_end_point_h(1).r & 0x04 ) >> 1 )
 | ( get_color_index(0) << 2 );
 uint i = 1;
 for ( ; i <= candidateFixUpIndex1DOrdered[partition][0]; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 2 + 1 );
 }
 for ( ; i < 16; i ++ )
 {
 block.w |= get_color_index(i) << ( i * 2 );
 }
}
